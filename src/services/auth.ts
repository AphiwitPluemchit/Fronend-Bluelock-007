import { api } from 'boot/axios'
import { Notify } from 'quasar'
import type { Auth } from 'src/types/auth'
import type { AxiosError } from 'axios'

// üìå Utility ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
const showError = (message: string) => {
  Notify.create({
    message,
    type: 'negative',
    position: 'bottom',
    timeout: 3000,
  })
}

// üìå Utility ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
const showSuccess = (message: string) => {
  Notify.create({
    message,
    type: 'positive',
    position: 'bottom',
    timeout: 3000,
  })
}

class AuthService {
  static async login(email: string, password: string): Promise<Auth | null> {
    try {
      console.log('üöÄ AuthService.login called with:', {
        email,
        passwordLength: password?.length || 0,
      })
      console.log('üåê API URL:', import.meta.env.VITE_API_URL)

      const res = await api.post<Auth>('/auth/login', { email, password })
      console.log('üì° API Response:', res)
      console.log('üìä Response data:', res.data)

      if (res.data?.message) {
        showSuccess(res.data.message)
      }

      return res.data
    } catch (error) {
      console.error('üí• AuthService login error:', error)

      // Handle specific error codes from backend
      const axiosError = error as AxiosError<{
        code: string
        error: string
        remainingTime?: number
      }>
      if (axiosError.response?.data?.code) {
        const errorCode = axiosError.response.data.code
        const errorMessage = axiosError.response.data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'

        console.log('üö® Error code:', errorCode, 'Message:', errorMessage)

        switch (errorCode) {
          case 'MISSING_CREDENTIALS':
            showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô')
            break
          case 'INVALID_CREDENTIALS':
            showError('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
            break
          case 'RATE_LIMITED': {
            const remainingTime = axiosError.response?.data?.remainingTime || 0
            const minutes = Math.floor(remainingTime / 60)
            const seconds = remainingTime % 60
            showError(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`)
            break
          }
          case 'TOKEN_ERROR':
            showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token')
            break
          default:
            showError(errorMessage)
        }
      } else {
        console.error('üö® No error code in response:', axiosError.response)
        showError('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
      }

      console.error('Login failed:', error)
      return null
    }
  }

  // google OAuth login handled separately in LoginPage.vue
  static async loginWithGoogle(): Promise<void> {
    try {
      const res = await api.get<{ url: string }>('/auth/google')

      if (res.data?.url) {
        window.location.href = res.data.url
      } else {
        showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÑ‡∏î‡πâ')
        console.error('No URL in response data:', res.data)
      }
    } catch (error) {
      console.error('üí• AuthService loginWithGoogle error:', error)
      showError('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
    }
  }

  static async logout(userId: string): Promise<boolean> {
    try {
      console.log('üö™ AuthService.logout called for user:', userId)
      console.log('üåê API URL:', import.meta.env.VITE_API_URL)
      console.log('üé´ Token exists:', !!localStorage.getItem('access_token'))

      // Backend logout endpoint: /auth/logout
      // Backend now uses JWT middleware, so userId is extracted from token
      // No need to send userId in request body
      const res = await api.post('/auth/logout')

      console.log('üì° Logout API Response:', res)
      console.log('üìä Response data:', res.data)

      if (res.data?.message) {
        showSuccess(res.data.message)
      }

      console.log('‚úÖ Logout API call successful')
      return true
    } catch (error) {
      console.error('üí• AuthService logout error:', error)

      // Handle specific error types
      const axiosError = error as AxiosError<{ status: number; data: Record<string, unknown> }>

      if (axiosError.response) {
        const status = axiosError.response.status
        const data = axiosError.response.data

        console.log('üö® Logout failed with status:', status)
        console.log('üö® Error data:', data)

        switch (status) {
          case 401:
            console.warn('‚ö†Ô∏è Unauthorized - token may be invalid or expired')
            break
          case 404:
            console.warn('‚ö†Ô∏è Logout endpoint not found - check backend configuration')
            break
          case 500:
            console.warn('‚ö†Ô∏è Backend server error during logout')
            break
          default:
            console.warn('‚ö†Ô∏è Logout failed with status:', status)
        }
      } else if (axiosError.request) {
        console.warn('‚ö†Ô∏è No response received - network or backend issue')
      } else {
        console.warn('‚ö†Ô∏è Logout request setup failed:', axiosError.message)
      }

      // Return true to indicate logout was handled (even if API failed)
      // This prevents the logout process from breaking
      return true
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å /auth/me
  static async getProfile(): Promise<Auth | null> {
    try {
      console.log('üîç AuthService.getProfile called')
      console.log('üé´ Token exists:', !!localStorage.getItem('access_token'))

      const res = await api.get<Auth>('/auth/me')
      console.log('üì° Profile API Response:', res)
      console.log('üìä Profile data:', res.data)

      return res.data || null
    } catch (error) {
      console.error('üí• AuthService getProfile error:', error)

      const axiosError = error as AxiosError<{ status: number }>
      if (axiosError.response?.status === 401) {
        console.warn('‚ö†Ô∏è Unauthorized - token may be invalid or expired')
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á showError ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ interceptor ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      } else {
        showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
      }

      return null
    }
  }

  // Deprecated: ‡πÉ‡∏ä‡πâ getProfile() ‡πÅ‡∏ó‡∏ô
  static async fetchProfile(): Promise<Auth | null> {
    return this.getProfile()
  }

  // ‚úÖ Refresh access token using refresh token
  static async refreshToken(): Promise<Auth | null> {
    try {
      const refreshToken = localStorage.getItem('refresh_token')
      if (!refreshToken) {
        console.warn('‚ö†Ô∏è No refresh token found')
        return null
      }

      console.log('üîÑ AuthService.refreshToken called')
      console.log('üé´ Refresh token exists:', !!refreshToken)

      const res = await api.post<Auth>(
        '/auth/refresh',
        { refreshToken },
        {
          headers: {
            'X-Skip-Loading': 'true',
            'X-Skip-Auth-Redirect': 'true',
          },
        },
      )
      console.log('üì° Refresh Token API Response:', res)
      console.log('üìä Response data:', res.data)

      if (res.data?.accessToken && res.data?.refreshToken) {
        console.log('‚úÖ Token refresh successful')
        console.log('üé´ New Access Token:', res.data.accessToken.substring(0, 20) + '...')
        console.log('üîÑ New Refresh Token:', res.data.refreshToken.substring(0, 20) + '...')

        // Update tokens in localStorage
        localStorage.setItem('access_token', res.data.accessToken)
        localStorage.setItem('refresh_token', res.data.refreshToken)

        return res.data
      }

      console.warn('‚ö†Ô∏è Refresh token response incomplete:', res.data)
      return null
    } catch (error) {
      console.error('üí• AuthService refreshToken error:', error)

      const axiosError = error as AxiosError<{ code: string; error: string }>
      if (axiosError.response?.data?.code) {
        const errorCode = axiosError.response.data.code
        const errorMessage = axiosError.response.data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'

        console.log('üö® Refresh error code:', errorCode, 'Message:', errorMessage)

        switch (errorCode) {
          case 'INVALID_TOKEN':
          case 'TOKEN_NOT_FOUND':
          case 'USER_NOT_FOUND':
            console.warn('‚ö†Ô∏è Token refresh failed - user needs to login again')
            // Clear tokens and redirect to login
            localStorage.removeItem('access_token')
            localStorage.removeItem('refresh_token')
            localStorage.removeItem('user')
            break
          default:
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á showError ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ interceptor ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            console.error('Refresh token error:', errorMessage)
        }
      }

      return null
    }
  }
}

export default AuthService
