import { route } from 'quasar/wrappers'
import {
  createMemoryHistory,
  createRouter,
  createWebHashHistory,
  createWebHistory,
  type RouteRecordRaw,
} from 'vue-router'
import { useAuthStore } from 'src/stores/auth'

// üß≠ ‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° Route ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
import { publicRoutes } from './publicRoutes'
import { adminRoutes } from './adminRoutes'
import { studentRoutes } from './studentRoutes'

// üìå ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô Route ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const routes: RouteRecordRaw[] = [
  ...publicRoutes,
  ...adminRoutes,
  ...studentRoutes,
  // fallback route
  {
    path: '/:catchAll(.*)*',
    component: () => import('pages/ErrorUnauthorized.vue'),
  },
]

export default route(function () {
  const createHistory = process.env.SERVER
    ? createMemoryHistory
    : process.env.VUE_ROUTER_MODE === 'history'
      ? createWebHistory
      : createWebHashHistory

  const Router = createRouter({
    scrollBehavior: () => ({ left: 0, top: 0 }),
    routes,
    history: createHistory(process.env.VUE_ROUTER_BASE),
  })

  Router.beforeEach((to, from, next) => {
    const auth = useAuthStore()
    auth.loadUserFromLocalStorage()
    const userRole = auth.getRole

    const isPublic = to.meta.public || false
    const requiredRole = to.meta.role

    // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ public ‚Üí ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    if (isPublic) {
      return next()
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ user ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å path ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß redirect ‡πÑ‡∏õ login
    if (!userRole) {
      if (!localStorage.getItem('redirectAfterLogin')) {
        localStorage.setItem('redirectAfterLogin', to.fullPath)
      }
      return next({ name: 'login' }) // <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å '/' ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ route login ‡∏à‡∏£‡∏¥‡∏á
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ role ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ ‚Üí redirect ‡πÑ‡∏õ unauthorized
    if (requiredRole && requiredRole !== userRole) {
      return next('/unauthorized')
    }

    return next()
  })

  return Router
})
