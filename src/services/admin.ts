import type { AxiosError } from 'axios'
import { api } from 'boot/axios'
import { Notify } from 'quasar'
import type { Admin } from 'src/types/admin'
import type { Pagination, PaginationResponse } from 'src/types/pagination'

const showSuccess = (message: string) => {
  Notify.create({
    message,
    type: 'positive',
    position: 'bottom',
    timeout: 3000,
  })
}
// üîî ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
const showError = (message: string) => {
  Notify.create({
    message,
    type: 'negative',
    position: 'bottom',
    timeout: 3000,
  })
}
const getErrorMessage = (error: unknown, defaultMessage: string): string => {
  if (typeof error === 'object' && error !== null && 'response' in error) {
    const axiosErr = error as AxiosError<{ message?: string }>
    return axiosErr.message
  }
  return defaultMessage
}
export class AdminService {
  static path = 'admins'

  static async getAll(params: Pagination) {
    try {
      const res = await api.get<PaginationResponse<Admin>>(this.path, { params: params })
      return res.data
    } catch (error) {
      const message = getErrorMessage(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ')
      showError(message)
      console.error('Error fetching admins:', error)
      throw error
    }
  }
  static async createAdmin(payload: Admin) {
    try {
      const res = await api.post(this.path, payload)
      showSuccess('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      return res.data
    } catch (error) {
      const message = getErrorMessage(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ')
      showError(message)
      console.error('Error creating admin', error)
      throw error
    }
  }

  static async getOne(id: string) {
    try {
      const res = await api.get(`${this.path}/${id}`)
      return res.data
    } catch (error) {
      const message = getErrorMessage(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ')
      showError(message)
      console.error(`Error fetching admin ID: ${id}`, error)
      throw error
    }
  }

  static async updateOne(id: string, payload: Admin) {
    try {
      const res = await api.put(`${this.path}/${id}`, payload)
      showSuccess('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      return res.data
    } catch (error) {
      const message = getErrorMessage(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ')
      showError(message)
      console.error('Error updating admin', error)
      throw error
    }
  }

  static async deleteOne(id: string) {
    try {
      const res = await api.delete(`${this.path}/${id}`)
      showSuccess('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      return res.data
    } catch (error) {
      const message = getErrorMessage(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ')
      showError(message)
      console.error('Error deleting admin', error)
      throw error
    }
  }
}
