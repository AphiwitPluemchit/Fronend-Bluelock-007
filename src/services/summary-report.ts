import { api } from 'boot/axios'
import { Notify } from 'quasar'

// ‚õëÔ∏è Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Error
const showError = (message: string) => {
  Notify.create({
    message,
    type: 'negative',
    position: 'bottom',
    timeout: 3000,
  })
}

export class SammaryReportService {
  static path = 'summary-report'

  /**
   * ‚ú® NEW: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary ‡∏à‡∏≤‡∏Å enrollment ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Summary_Check_In_Out_Reports)
   * @param programId - ID ‡∏Ç‡∏≠‡∏á program
   * @param date - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ query (YYYY-MM-DD)
   * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary { registered, checkin, checkinLate, checkout, notParticipating }
   */
  static async getEnrollmentSummary(programId: string, date: string) {
    try {
      if (!programId) throw new Error('programId is required')
      if (!date) throw new Error('date is required')
      const res = await api.get(`${this.path}/enrollment/${programId}?date=${date}`)
      return res.data
    } catch (error) {
      showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ')
      console.error(`Error fetching enrollment summary for program ID: ${programId}`, error)
      throw error
    }
  }

  /**
   * ‚ú® NEW (V2): ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary ‡∏à‡∏≤‡∏Å enrollment ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ aggregation (‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
   * @param programId - ID ‡∏Ç‡∏≠‡∏á program
   * @param date - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ query (YYYY-MM-DD)
   * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary { registered, checkin, checkinLate, checkout, notParticipating }
   */
  static async getEnrollmentSummaryV2(programId: string, date: string) {
    try {
      if (!programId) throw new Error('programId is required')
      if (!date) throw new Error('date is required')
      const res = await api.get(`${this.path}/enrollment-v2/${programId}?date=${date}`)
      return res.data
    } catch (error) {
      showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ')
      console.error(`Error fetching enrollment summary V2 for program ID: ${programId}`, error)
      throw error
    }
  }

  /**
   * üî¥ OLD (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ backward compatibility): ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Summary_Check_In_Out_Reports
   * @deprecated ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ getEnrollmentSummary() ‡∏´‡∏£‡∏∑‡∏≠ getEnrollmentSummaryV2() ‡πÅ‡∏ó‡∏ô
   */
  static async getSamaryEnrollment(programId: string, date: string) {
    try {
      if (!programId) throw new Error('programId is required')
      if (!date) throw new Error('date is required')
      const res = await api.get(`${this.path}/${programId}/${date}`)
      return res.data
    } catch (error) {
      showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ')
      console.error(`Error fetching enrollment summary for program ID: ${programId}`, error)
      throw error
    }
  }
}
